%{
open ComSciModManAssTypesAST
%}

%token <float> NUM
%token <bool> BOO
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF AND OR NOT EQUAL GT LT GTE LTE NOTEQUAL

%left PLUS MINUS
%left TIMES DIV
%left OR
%left AND
%left EQUAL GT GTE LTE NOTEQUAL
%left NOT
%right POW

%start start

%type <expr> start
%type <expr> expression

%%

start: expression EOF             { $1 }

ex:
  | exA {NumEx($1)}
  | exB {BooEx($1)}
    
    

exA:
  | exA TIMES exA               { TimesExpr($1,$3) }
  | exA DIV exA                 { DivExpr($1,$3) }
  | exA PLUS exA                { PlusExpr($1,$3) }
  | exA MINUS exA               { MinusExpr($1,$3) }
  | exA POW exA                 { PowExpr($1,$3) }
  | PLUS exA                    { UPlusExpr($2) }
  | MINUS exA                   { UMinusExpr($2) }
  | NUM                         { Num($1) }
  | LPAR exA RPAR               { $2 }

exB:
    | exB AND exB               { AndB($1, $3) }
    | exB OR exB                { OrB($1, $3) }
    | NOT exB                   { NotB($2) }
    | exB EQUAL exB             { EqualB($1, $3) }
    | exB NOTEQUAL exB          { NotEqualB($1, $3) }
    | exB GT exB                { GTB($1, $3) }
    | exB GTE exB               { GTB($1, $3) }
    | exB LT exB                { GTB($1, $3) }
    | exB LTE exB               { GTB($1, $3) }
    | LPAR exB RPAR             { $2 }
    | BOO                       { BB($1) }


%%
