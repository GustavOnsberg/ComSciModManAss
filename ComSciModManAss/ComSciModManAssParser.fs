// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "ComSciModManAssParser.fsp"

open ComSciModManAssTypesAST

# 9 "ComSciModManAssParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | AND
  | BITAND
  | OR
  | BITOR
  | NOT
  | EQUAL
  | GT
  | LT
  | GTE
  | LTE
  | NOTEQUAL
  | ASSIGN
  | LAMBDA
  | LBRAC
  | RBRAC
  | DO
  | OD
  | IF
  | FI
  | SEQUENCE
  | ELSE
  | SKIP
  | VAR of (string)
  | BOO of (bool)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_AND
    | TOKEN_BITAND
    | TOKEN_OR
    | TOKEN_BITOR
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GTE
    | TOKEN_LTE
    | TOKEN_NOTEQUAL
    | TOKEN_ASSIGN
    | TOKEN_LAMBDA
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_SEQUENCE
    | TOKEN_ELSE
    | TOKEN_SKIP
    | TOKEN_VAR
    | TOKEN_BOO
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ex
    | NONTERM_exAth
    | NONTERM_exBool
    | NONTERM_exCom
    | NONTERM_exGuardCom

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | EOF  -> 7 
  | AND  -> 8 
  | BITAND  -> 9 
  | OR  -> 10 
  | BITOR  -> 11 
  | NOT  -> 12 
  | EQUAL  -> 13 
  | GT  -> 14 
  | LT  -> 15 
  | GTE  -> 16 
  | LTE  -> 17 
  | NOTEQUAL  -> 18 
  | ASSIGN  -> 19 
  | LAMBDA  -> 20 
  | LBRAC  -> 21 
  | RBRAC  -> 22 
  | DO  -> 23 
  | OD  -> 24 
  | IF  -> 25 
  | FI  -> 26 
  | SEQUENCE  -> 27 
  | ELSE  -> 28 
  | SKIP  -> 29 
  | VAR _ -> 30 
  | BOO _ -> 31 
  | NUM _ -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_AND 
  | 9 -> TOKEN_BITAND 
  | 10 -> TOKEN_OR 
  | 11 -> TOKEN_BITOR 
  | 12 -> TOKEN_NOT 
  | 13 -> TOKEN_EQUAL 
  | 14 -> TOKEN_GT 
  | 15 -> TOKEN_LT 
  | 16 -> TOKEN_GTE 
  | 17 -> TOKEN_LTE 
  | 18 -> TOKEN_NOTEQUAL 
  | 19 -> TOKEN_ASSIGN 
  | 20 -> TOKEN_LAMBDA 
  | 21 -> TOKEN_LBRAC 
  | 22 -> TOKEN_RBRAC 
  | 23 -> TOKEN_DO 
  | 24 -> TOKEN_OD 
  | 25 -> TOKEN_IF 
  | 26 -> TOKEN_FI 
  | 27 -> TOKEN_SEQUENCE 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_SKIP 
  | 30 -> TOKEN_VAR 
  | 31 -> TOKEN_BOO 
  | 32 -> TOKEN_NUM 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_ex 
    | 3 -> NONTERM_ex 
    | 4 -> NONTERM_ex 
    | 5 -> NONTERM_ex 
    | 6 -> NONTERM_exAth 
    | 7 -> NONTERM_exAth 
    | 8 -> NONTERM_exAth 
    | 9 -> NONTERM_exAth 
    | 10 -> NONTERM_exAth 
    | 11 -> NONTERM_exAth 
    | 12 -> NONTERM_exAth 
    | 13 -> NONTERM_exAth 
    | 14 -> NONTERM_exAth 
    | 15 -> NONTERM_exAth 
    | 16 -> NONTERM_exAth 
    | 17 -> NONTERM_exBool 
    | 18 -> NONTERM_exBool 
    | 19 -> NONTERM_exBool 
    | 20 -> NONTERM_exBool 
    | 21 -> NONTERM_exBool 
    | 22 -> NONTERM_exBool 
    | 23 -> NONTERM_exBool 
    | 24 -> NONTERM_exBool 
    | 25 -> NONTERM_exBool 
    | 26 -> NONTERM_exBool 
    | 27 -> NONTERM_exBool 
    | 28 -> NONTERM_exBool 
    | 29 -> NONTERM_exBool 
    | 30 -> NONTERM_exCom 
    | 31 -> NONTERM_exCom 
    | 32 -> NONTERM_exCom 
    | 33 -> NONTERM_exCom 
    | 34 -> NONTERM_exCom 
    | 35 -> NONTERM_exCom 
    | 36 -> NONTERM_exGuardCom 
    | 37 -> NONTERM_exGuardCom 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | AND  -> "AND" 
  | BITAND  -> "BITAND" 
  | OR  -> "OR" 
  | BITOR  -> "BITOR" 
  | NOT  -> "NOT" 
  | EQUAL  -> "EQUAL" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GTE  -> "GTE" 
  | LTE  -> "LTE" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | ASSIGN  -> "ASSIGN" 
  | LAMBDA  -> "LAMBDA" 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | SEQUENCE  -> "SEQUENCE" 
  | ELSE  -> "ELSE" 
  | SKIP  -> "SKIP" 
  | VAR _ -> "VAR" 
  | BOO _ -> "BOO" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | BITAND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | BITOR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | SEQUENCE  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 29us; 65535us; 0us; 4us; 29us; 8us; 30us; 9us; 31us; 10us; 32us; 11us; 33us; 12us; 34us; 13us; 35us; 14us; 37us; 15us; 38us; 16us; 42us; 17us; 43us; 18us; 53us; 19us; 54us; 19us; 55us; 19us; 56us; 19us; 57us; 19us; 58us; 20us; 59us; 21us; 60us; 22us; 61us; 23us; 62us; 24us; 63us; 25us; 67us; 26us; 68us; 27us; 70us; 28us; 75us; 19us; 78us; 19us; 83us; 19us; 10us; 65535us; 0us; 5us; 38us; 51us; 53us; 46us; 54us; 47us; 55us; 48us; 56us; 49us; 57us; 50us; 75us; 52us; 78us; 52us; 83us; 52us; 3us; 65535us; 0us; 6us; 74us; 72us; 81us; 73us; 4us; 65535us; 0us; 7us; 75us; 76us; 78us; 79us; 83us; 82us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 35us; 46us; 50us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 12us; 2us; 6us; 7us; 8us; 9us; 10us; 22us; 23us; 24us; 25us; 26us; 27us; 6us; 3us; 17us; 18us; 19us; 20us; 36us; 2us; 4us; 33us; 2us; 5us; 37us; 6us; 6us; 6us; 7us; 8us; 9us; 10us; 6us; 6us; 7us; 7us; 8us; 9us; 10us; 6us; 6us; 7us; 8us; 8us; 9us; 10us; 6us; 6us; 7us; 8us; 9us; 9us; 10us; 6us; 6us; 7us; 8us; 9us; 10us; 10us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 6us; 6us; 7us; 8us; 9us; 10us; 12us; 6us; 6us; 7us; 8us; 9us; 10us; 14us; 12us; 6us; 7us; 8us; 9us; 10us; 14us; 22us; 23us; 24us; 25us; 26us; 27us; 6us; 6us; 7us; 8us; 9us; 10us; 16us; 7us; 6us; 7us; 8us; 9us; 10us; 16us; 31us; 11us; 6us; 7us; 8us; 9us; 10us; 22us; 23us; 24us; 25us; 26us; 27us; 6us; 6us; 7us; 8us; 9us; 10us; 22us; 6us; 6us; 7us; 8us; 9us; 10us; 23us; 6us; 6us; 7us; 8us; 9us; 10us; 24us; 6us; 6us; 7us; 8us; 9us; 10us; 25us; 6us; 6us; 7us; 8us; 9us; 10us; 26us; 6us; 6us; 7us; 8us; 9us; 10us; 27us; 6us; 6us; 7us; 8us; 9us; 10us; 30us; 6us; 6us; 7us; 8us; 9us; 10us; 31us; 6us; 6us; 7us; 8us; 9us; 10us; 31us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 14us; 28us; 1us; 14us; 2us; 15us; 16us; 4us; 15us; 16us; 30us; 31us; 1us; 16us; 2us; 16us; 31us; 1us; 16us; 2us; 16us; 31us; 5us; 17us; 17us; 18us; 19us; 20us; 5us; 17us; 18us; 18us; 19us; 20us; 5us; 17us; 18us; 19us; 19us; 20us; 5us; 17us; 18us; 19us; 20us; 20us; 5us; 17us; 18us; 19us; 20us; 21us; 5us; 17us; 18us; 19us; 20us; 28us; 5us; 17us; 18us; 19us; 20us; 36us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 30us; 31us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 2us; 33us; 33us; 2us; 33us; 36us; 1us; 33us; 1us; 34us; 2us; 34us; 37us; 1us; 34us; 1us; 35us; 2us; 35us; 37us; 1us; 35us; 1us; 36us; 2us; 37us; 37us; 1us; 37us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 21us; 28us; 31us; 34us; 41us; 48us; 55us; 62us; 69us; 76us; 83us; 90us; 103us; 110us; 118us; 130us; 137us; 144us; 151us; 158us; 165us; 172us; 179us; 186us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 214us; 216us; 219us; 224us; 226us; 229us; 231us; 234us; 240us; 246us; 252us; 258us; 264us; 270us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 305us; 307us; 309us; 311us; 313us; 315us; 318us; 321us; 323us; 325us; 328us; 330us; 332us; 335us; 337us; 339us; 342us; |]
let _fsyacc_action_rows = 84
let _fsyacc_actionTableElements = [|10us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 23us; 78us; 25us; 75us; 29us; 71us; 30us; 41us; 31us; 65us; 32us; 36us; 0us; 49152us; 1us; 32768us; 7us; 3us; 0us; 16385us; 11us; 16386us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 13us; 58us; 14us; 60us; 15us; 62us; 16us; 61us; 17us; 63us; 18us; 59us; 5us; 16387us; 8us; 53us; 9us; 54us; 10us; 55us; 11us; 56us; 20us; 81us; 1us; 16388us; 27us; 74us; 1us; 16389us; 28us; 83us; 1us; 16390us; 4us; 33us; 1us; 16391us; 4us; 33us; 3us; 16392us; 0us; 29us; 1us; 30us; 4us; 33us; 3us; 16393us; 0us; 29us; 1us; 30us; 4us; 33us; 1us; 16394us; 4us; 33us; 3us; 16395us; 0us; 29us; 1us; 30us; 4us; 33us; 3us; 16396us; 0us; 29us; 1us; 30us; 4us; 33us; 6us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 6us; 39us; 12us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 6us; 39us; 13us; 58us; 14us; 60us; 15us; 62us; 16us; 61us; 17us; 63us; 18us; 59us; 6us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 22us; 44us; 6us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 22us; 45us; 11us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 13us; 58us; 14us; 60us; 15us; 62us; 16us; 61us; 17us; 63us; 18us; 59us; 5us; 16406us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16407us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16408us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16409us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16410us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16411us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 16414us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 6us; 32768us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 22us; 69us; 5us; 16415us; 0us; 29us; 1us; 30us; 2us; 31us; 3us; 32us; 4us; 33us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 0us; 16397us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 0us; 16398us; 1us; 16399us; 21us; 42us; 2us; 16399us; 19us; 67us; 21us; 43us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 0us; 16400us; 1us; 16400us; 19us; 70us; 0us; 16401us; 0us; 16402us; 2us; 16403us; 8us; 53us; 9us; 54us; 2us; 16404us; 8us; 53us; 9us; 54us; 0us; 16405us; 5us; 32768us; 6us; 64us; 8us; 53us; 9us; 54us; 10us; 55us; 11us; 56us; 5us; 32768us; 8us; 53us; 9us; 54us; 10us; 55us; 11us; 56us; 20us; 81us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 0us; 16412us; 0us; 16413us; 2us; 32768us; 19us; 67us; 21us; 68us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 1us; 32768us; 19us; 70us; 5us; 32768us; 2us; 34us; 3us; 35us; 5us; 37us; 30us; 40us; 32us; 36us; 0us; 16416us; 1us; 16417us; 27us; 74us; 1us; 16420us; 27us; 74us; 4us; 32768us; 23us; 78us; 25us; 75us; 29us; 71us; 30us; 66us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 2us; 32768us; 26us; 77us; 28us; 83us; 0us; 16418us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; 2us; 32768us; 24us; 80us; 28us; 83us; 0us; 16419us; 4us; 32768us; 23us; 78us; 25us; 75us; 29us; 71us; 30us; 66us; 1us; 16421us; 28us; 83us; 7us; 32768us; 2us; 34us; 3us; 35us; 5us; 38us; 12us; 57us; 30us; 40us; 31us; 65us; 32us; 36us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 14us; 15us; 27us; 33us; 35us; 37us; 39us; 41us; 45us; 49us; 51us; 55us; 59us; 66us; 79us; 86us; 93us; 105us; 111us; 117us; 123us; 129us; 135us; 141us; 147us; 154us; 160us; 166us; 172us; 178us; 184us; 190us; 196us; 202us; 203us; 209us; 217us; 218us; 220us; 223us; 229us; 235us; 236us; 238us; 239us; 240us; 243us; 246us; 247us; 253us; 259us; 267us; 275us; 283us; 291us; 299us; 305us; 311us; 317us; 323us; 329us; 335us; 336us; 337us; 340us; 346us; 352us; 354us; 360us; 361us; 363us; 365us; 370us; 378us; 381us; 382us; 390us; 393us; 394us; 399us; 401us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 3us; 1us; 4us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 299 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 308 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "ComSciModManAssParser.fsp"
                                                 _1 
                   )
# 27 "ComSciModManAssParser.fsp"
                 : ex));
# 319 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "ComSciModManAssParser.fsp"
                                                                   NumEx(_1) 
                   )
# 30 "ComSciModManAssParser.fsp"
                 : ex));
# 330 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "ComSciModManAssParser.fsp"
                                                                   BooEx(_1) 
                   )
# 31 "ComSciModManAssParser.fsp"
                 : ex));
# 341 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "ComSciModManAssParser.fsp"
                                                                   CommandEx(_1) 
                   )
# 32 "ComSciModManAssParser.fsp"
                 : ex));
# 352 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exGuardCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "ComSciModManAssParser.fsp"
                                                                   GcommandEx(_1) 
                   )
# 33 "ComSciModManAssParser.fsp"
                 : ex));
# 363 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ComSciModManAssParser.fsp"
                                                                   TimesExpr(_1,_3) 
                   )
# 36 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 375 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "ComSciModManAssParser.fsp"
                                                                   DivExpr(_1,_3) 
                   )
# 37 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 387 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "ComSciModManAssParser.fsp"
                                                                   PlusExpr(_1,_3) 
                   )
# 38 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 399 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "ComSciModManAssParser.fsp"
                                                                   MinusExpr(_1,_3) 
                   )
# 39 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 411 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ComSciModManAssParser.fsp"
                                                                   PowExpr(_1,_3) 
                   )
# 40 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 423 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "ComSciModManAssParser.fsp"
                                                                   UPlusExpr(_2) 
                   )
# 41 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 434 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "ComSciModManAssParser.fsp"
                                                                   UMinusExpr(_2) 
                   )
# 42 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 445 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "ComSciModManAssParser.fsp"
                                                                   Num(_1) 
                   )
# 43 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 456 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "ComSciModManAssParser.fsp"
                                                                   _2 
                   )
# 44 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 467 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ComSciModManAssParser.fsp"
                                                                   VarX(_1) 
                   )
# 45 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 478 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "ComSciModManAssParser.fsp"
                                                                   Array(_1, _3) 
                   )
# 46 "ComSciModManAssParser.fsp"
                 : 'exAth));
# 490 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ComSciModManAssParser.fsp"
                                                                   And(_1, _3) 
                   )
# 49 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 502 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "ComSciModManAssParser.fsp"
                                                                   BitAnd(_1, _3) 
                   )
# 50 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 514 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "ComSciModManAssParser.fsp"
                                                                   Or(_1, _3) 
                   )
# 51 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 526 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ComSciModManAssParser.fsp"
                                                                   BitOr(_1, _3) 
                   )
# 52 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 538 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ComSciModManAssParser.fsp"
                                                                   Not(_2) 
                   )
# 53 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 549 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "ComSciModManAssParser.fsp"
                                                                   Equal(_1, _3) 
                   )
# 54 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 561 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "ComSciModManAssParser.fsp"
                                                                   NotEqual(_1, _3) 
                   )
# 55 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 573 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "ComSciModManAssParser.fsp"
                                                                   GT(_1, _3) 
                   )
# 56 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 585 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "ComSciModManAssParser.fsp"
                                                                   GTE(_1, _3) 
                   )
# 57 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 597 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "ComSciModManAssParser.fsp"
                                                                   LT(_1, _3) 
                   )
# 58 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 609 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "ComSciModManAssParser.fsp"
                                                                   LTE(_1, _3) 
                   )
# 59 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 621 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "ComSciModManAssParser.fsp"
                                                                   _2 
                   )
# 60 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 632 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "ComSciModManAssParser.fsp"
                                                                   Boo(_1) 
                   )
# 61 "ComSciModManAssParser.fsp"
                 : 'exBool));
# 643 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "ComSciModManAssParser.fsp"
                                                                  Assign(_1, _3) 
                   )
# 64 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 655 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exAth)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "ComSciModManAssParser.fsp"
                                                                  AssignArray(_1, _3, _6) 
                   )
# 65 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 668 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "ComSciModManAssParser.fsp"
                                                                  Skip 
                   )
# 66 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 678 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exCom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "ComSciModManAssParser.fsp"
                                                                  Sequence(_1, _3) 
                   )
# 67 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 690 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exGuardCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "ComSciModManAssParser.fsp"
                                                                  IfState(_2) 
                   )
# 68 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 701 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exGuardCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "ComSciModManAssParser.fsp"
                                                                  DoState(_2) 
                   )
# 69 "ComSciModManAssParser.fsp"
                 : 'exCom));
# 712 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exBool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "ComSciModManAssParser.fsp"
                                                                  Lambda(_1, _3) 
                   )
# 72 "ComSciModManAssParser.fsp"
                 : 'exGuardCom));
# 724 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exGuardCom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exGuardCom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "ComSciModManAssParser.fsp"
                                                                  Else(_1, _3) 
                   )
# 73 "ComSciModManAssParser.fsp"
                 : 'exGuardCom));
|]
# 737 "ComSciModManAssParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ex =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
