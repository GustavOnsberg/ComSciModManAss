// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "ComSciModManAssParser.fsp"

open ComSciModManAssTypesAST

# 9 "ComSciModManAssParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | AND
  | OR
  | NOT
  | EQUAL
  | GT
  | LT
  | GTE
  | LTE
  | NOTEQUAL
  | BOO of (bool)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GTE
    | TOKEN_LTE
    | TOKEN_NOTEQUAL
    | TOKEN_BOO
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ex
    | NONTERM_exA
    | NONTERM_exB

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | EOF  -> 7 
  | AND  -> 8 
  | OR  -> 9 
  | NOT  -> 10 
  | EQUAL  -> 11 
  | GT  -> 12 
  | LT  -> 13 
  | GTE  -> 14 
  | LTE  -> 15 
  | NOTEQUAL  -> 16 
  | BOO _ -> 17 
  | NUM _ -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_AND 
  | 9 -> TOKEN_OR 
  | 10 -> TOKEN_NOT 
  | 11 -> TOKEN_EQUAL 
  | 12 -> TOKEN_GT 
  | 13 -> TOKEN_LT 
  | 14 -> TOKEN_GTE 
  | 15 -> TOKEN_LTE 
  | 16 -> TOKEN_NOTEQUAL 
  | 17 -> TOKEN_BOO 
  | 18 -> TOKEN_NUM 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_ex 
    | 3 -> NONTERM_ex 
    | 4 -> NONTERM_exA 
    | 5 -> NONTERM_exA 
    | 6 -> NONTERM_exA 
    | 7 -> NONTERM_exA 
    | 8 -> NONTERM_exA 
    | 9 -> NONTERM_exA 
    | 10 -> NONTERM_exA 
    | 11 -> NONTERM_exA 
    | 12 -> NONTERM_exA 
    | 13 -> NONTERM_exB 
    | 14 -> NONTERM_exB 
    | 15 -> NONTERM_exB 
    | 16 -> NONTERM_exB 
    | 17 -> NONTERM_exB 
    | 18 -> NONTERM_exB 
    | 19 -> NONTERM_exB 
    | 20 -> NONTERM_exB 
    | 21 -> NONTERM_exB 
    | 22 -> NONTERM_exB 
    | 23 -> NONTERM_exB 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | EQUAL  -> "EQUAL" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GTE  -> "GTE" 
  | LTE  -> "LTE" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | BOO _ -> "BOO" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | BOO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 10us; 65535us; 0us; 4us; 14us; 6us; 15us; 7us; 16us; 8us; 17us; 9us; 18us; 10us; 19us; 11us; 20us; 12us; 22us; 13us; 23us; 13us; 12us; 65535us; 0us; 5us; 23us; 34us; 35us; 25us; 36us; 26us; 37us; 27us; 38us; 28us; 39us; 29us; 40us; 30us; 41us; 31us; 42us; 32us; 43us; 33us; 44us; 34us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 6us; 2us; 4us; 5us; 6us; 7us; 8us; 9us; 3us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 21us; 6us; 4us; 4us; 5us; 6us; 7us; 8us; 6us; 4us; 5us; 5us; 6us; 7us; 8us; 6us; 4us; 5us; 6us; 6us; 7us; 8us; 6us; 4us; 5us; 6us; 7us; 7us; 8us; 6us; 4us; 5us; 6us; 7us; 8us; 8us; 6us; 4us; 5us; 6us; 7us; 8us; 9us; 6us; 4us; 5us; 6us; 7us; 8us; 10us; 6us; 4us; 5us; 6us; 7us; 8us; 12us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 12us; 22us; 1us; 12us; 9us; 13us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 14us; 16us; 17us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 9us; 13us; 14us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 9us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 9us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 9us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 15us; 25us; 32us; 39us; 46us; 53us; 60us; 67us; 74us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 102us; 104us; 114us; 124us; 134us; 144us; 154us; 164us; 174us; 184us; 194us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; |]
let _fsyacc_action_rows = 47
let _fsyacc_actionTableElements = [|6us; 32768us; 2us; 19us; 3us; 20us; 5us; 23us; 10us; 37us; 17us; 46us; 18us; 21us; 0us; 49152us; 1us; 32768us; 7us; 3us; 0us; 16385us; 5us; 16386us; 0us; 14us; 1us; 15us; 2us; 16us; 3us; 17us; 4us; 18us; 8us; 16387us; 8us; 35us; 9us; 36us; 11us; 38us; 12us; 40us; 13us; 42us; 14us; 41us; 15us; 43us; 16us; 39us; 1us; 16388us; 4us; 18us; 1us; 16389us; 4us; 18us; 3us; 16390us; 0us; 14us; 1us; 15us; 4us; 18us; 3us; 16391us; 0us; 14us; 1us; 15us; 4us; 18us; 1us; 16392us; 4us; 18us; 3us; 16393us; 0us; 14us; 1us; 15us; 4us; 18us; 3us; 16394us; 0us; 14us; 1us; 15us; 4us; 18us; 6us; 32768us; 0us; 14us; 1us; 15us; 2us; 16us; 3us; 17us; 4us; 18us; 6us; 24us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 0us; 16395us; 4us; 32768us; 2us; 19us; 3us; 20us; 5us; 22us; 18us; 21us; 6us; 32768us; 2us; 19us; 3us; 20us; 5us; 23us; 10us; 37us; 17us; 46us; 18us; 21us; 0us; 16396us; 6us; 16397us; 11us; 38us; 12us; 40us; 13us; 42us; 14us; 41us; 15us; 43us; 16us; 39us; 7us; 16398us; 8us; 35us; 11us; 38us; 12us; 40us; 13us; 42us; 14us; 41us; 15us; 43us; 16us; 39us; 1us; 16399us; 13us; 42us; 1us; 16400us; 13us; 42us; 1us; 16401us; 13us; 42us; 1us; 16402us; 13us; 42us; 1us; 16403us; 13us; 42us; 8us; 16404us; 8us; 35us; 9us; 36us; 11us; 38us; 12us; 40us; 13us; 42us; 14us; 41us; 15us; 43us; 16us; 39us; 1us; 16405us; 13us; 42us; 9us; 32768us; 6us; 45us; 8us; 35us; 9us; 36us; 11us; 38us; 12us; 40us; 13us; 42us; 14us; 41us; 15us; 43us; 16us; 39us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 3us; 32768us; 5us; 44us; 10us; 37us; 17us; 46us; 0us; 16406us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 10us; 11us; 17us; 26us; 28us; 30us; 34us; 38us; 40us; 44us; 48us; 55us; 60us; 65us; 70us; 75us; 80us; 85us; 90us; 91us; 96us; 103us; 104us; 111us; 119us; 121us; 123us; 125us; 127us; 129us; 138us; 140us; 150us; 154us; 158us; 162us; 166us; 170us; 174us; 178us; 182us; 186us; 190us; 191us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 199 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 208 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "ComSciModManAssParser.fsp"
                                                 _1 
                   )
# 24 "ComSciModManAssParser.fsp"
                 : ex));
# 219 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "ComSciModManAssParser.fsp"
                              NumEx(_1)
                   )
# 27 "ComSciModManAssParser.fsp"
                 : ex));
# 230 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "ComSciModManAssParser.fsp"
                              BooEx(_1)
                   )
# 28 "ComSciModManAssParser.fsp"
                 : ex));
# 241 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "ComSciModManAssParser.fsp"
                                                       TimesExpr(_1,_3) 
                   )
# 33 "ComSciModManAssParser.fsp"
                 : 'exA));
# 253 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "ComSciModManAssParser.fsp"
                                                       DivExpr(_1,_3) 
                   )
# 34 "ComSciModManAssParser.fsp"
                 : 'exA));
# 265 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "ComSciModManAssParser.fsp"
                                                       PlusExpr(_1,_3) 
                   )
# 35 "ComSciModManAssParser.fsp"
                 : 'exA));
# 277 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ComSciModManAssParser.fsp"
                                                       MinusExpr(_1,_3) 
                   )
# 36 "ComSciModManAssParser.fsp"
                 : 'exA));
# 289 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "ComSciModManAssParser.fsp"
                                                       PowExpr(_1,_3) 
                   )
# 37 "ComSciModManAssParser.fsp"
                 : 'exA));
# 301 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "ComSciModManAssParser.fsp"
                                                       UPlusExpr(_2) 
                   )
# 38 "ComSciModManAssParser.fsp"
                 : 'exA));
# 312 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "ComSciModManAssParser.fsp"
                                                       UMinusExpr(_2) 
                   )
# 39 "ComSciModManAssParser.fsp"
                 : 'exA));
# 323 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ComSciModManAssParser.fsp"
                                                       Num(_1) 
                   )
# 40 "ComSciModManAssParser.fsp"
                 : 'exA));
# 334 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "ComSciModManAssParser.fsp"
                                                       _2 
                   )
# 41 "ComSciModManAssParser.fsp"
                 : 'exA));
# 345 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "ComSciModManAssParser.fsp"
                                                       AndB(_1, _3) 
                   )
# 44 "ComSciModManAssParser.fsp"
                 : 'exB));
# 357 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ComSciModManAssParser.fsp"
                                                       OrB(_1, _3) 
                   )
# 45 "ComSciModManAssParser.fsp"
                 : 'exB));
# 369 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "ComSciModManAssParser.fsp"
                                                       NotB(_2) 
                   )
# 46 "ComSciModManAssParser.fsp"
                 : 'exB));
# 380 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "ComSciModManAssParser.fsp"
                                                       EqualB(_1, _3) 
                   )
# 47 "ComSciModManAssParser.fsp"
                 : 'exB));
# 392 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "ComSciModManAssParser.fsp"
                                                       NotEqualB(_1, _3) 
                   )
# 48 "ComSciModManAssParser.fsp"
                 : 'exB));
# 404 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ComSciModManAssParser.fsp"
                                                       GTB(_1, _3) 
                   )
# 49 "ComSciModManAssParser.fsp"
                 : 'exB));
# 416 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "ComSciModManAssParser.fsp"
                                                       GTB(_1, _3) 
                   )
# 50 "ComSciModManAssParser.fsp"
                 : 'exB));
# 428 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "ComSciModManAssParser.fsp"
                                                       GTB(_1, _3) 
                   )
# 51 "ComSciModManAssParser.fsp"
                 : 'exB));
# 440 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ComSciModManAssParser.fsp"
                                                       GTB(_1, _3) 
                   )
# 52 "ComSciModManAssParser.fsp"
                 : 'exB));
# 452 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ComSciModManAssParser.fsp"
                                                       _2 
                   )
# 53 "ComSciModManAssParser.fsp"
                 : 'exB));
# 463 "ComSciModManAssParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "ComSciModManAssParser.fsp"
                                                       BB(_1) 
                   )
# 54 "ComSciModManAssParser.fsp"
                 : 'exB));
|]
# 475 "ComSciModManAssParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ex =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
