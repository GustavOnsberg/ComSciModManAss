{
module ComSciModManAssLexer
open FSharp.Text.Lexing
open System

open ComSciModManAssParser

System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// The regexes:
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let boo         = ("true"|"false")?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let x           = ['a'-'z' 'A'-'Z']
let array_name  = x(x|digit)*

rule tokenize = parse

// The characters

| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| array_name    { let str = LexBuffer<_>.LexemeString lexbuf in VAR(str) }
| boo           { BOO(Boolean.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| "&&"          { AND }
| '&'           { BITAND }
| "||"          { OR }
| '|'           { BITOR }
| '!'           { NOT }
| "=="          { EQUAL }
| "!="          { NOTEQUAL }
| '>'           { GT }
| ">="          { GTE }
| '<'           { LT }
| "<="          { LTE }
| ";"           { SEQUENCE }
| '['           { LBRAC }
| ']'           { RBRAC }
| ":="          { ASSIGN }
| "->"          { LAMBDA }
| "[]"          { ELSE }
| "if"          { IF }
| "fi"          { FI }
| "do"          { DO }
| "od"          { OD }
| "skip"        { SKIP }
| eof           { EOF }